%% AQBaselineGraph
% Written by Daniel Boey (7/12/17)
% For processing of the ambient AQ from roof testing from 10-15 September

%% Import data from text file.
% Auto-generated by MATLAB on 2017/12/07 20:50:59

filename = 'C:\Users\danielboeyks\Documents\Duke Marine Lab_Fall 2017\ENV393A Research Independent Study\MATLAB Processing\AmbientAQ 10_15 Sept_CLEANEDv2.csv';
delimiter = ',';
startRow = 2;
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';
fileID = fopen(filename,'r');
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

dateFormats = {'dd/MM/yyyy', 'dd/MM/yyyy', 'HH:mm:ss'};
dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[1,2,8]% Convert the contents of columns with dates to MATLAB datetimes using the specified date format.
    try
        dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[1,2,8]}, 'InputFormat', dateFormats{col==[1,2,8]}); %#ok<SAGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[1,2,8]}, 'InputFormat', dateFormats{col==[1,2,8]}); %%#ok<SAGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = cellfun(@isempty, dataArray{col});
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[1,2,8]);
blankDates = blankDates(:,[1,2,8]);
invalidDates = invalidDates(:,[1,2,8]);

rawNumericColumns = raw(:, [3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]);

R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

yyyymmdd = dates{:, 1};
VarName2 = dates{:, 2};
DateTimeValueShifted = cell2mat(rawNumericColumns(:, 1));
DateTimeValue = cell2mat(rawNumericColumns(:, 2));
hh = cell2mat(rawNumericColumns(:, 3));
mm = cell2mat(rawNumericColumns(:, 4));
ss = cell2mat(rawNumericColumns(:, 5));
hhmmss = dates{:, 3};
timeElapsed = cell2mat(rawNumericColumns(:, 6));
TPM1 = cell2mat(rawNumericColumns(:, 7));
TPM25 = cell2mat(rawNumericColumns(:, 8));
TPM10 = cell2mat(rawNumericColumns(:, 9));
PM1 = cell2mat(rawNumericColumns(:, 10));
PM25 = cell2mat(rawNumericColumns(:, 11));
PM10 = cell2mat(rawNumericColumns(:, 12));
CO2 = cell2mat(rawNumericColumns(:, 13));
TempC = cell2mat(rawNumericColumns(:, 14));
Humidity = cell2mat(rawNumericColumns(:, 15));
NO = cell2mat(rawNumericColumns(:, 16));
NO2 = cell2mat(rawNumericColumns(:, 17));
O3 = cell2mat(rawNumericColumns(:, 18));
CO2raw = cell2mat(rawNumericColumns(:, 19));
workNO2 = cell2mat(rawNumericColumns(:, 20));
auxNO2 = cell2mat(rawNumericColumns(:, 21));
workO3 = cell2mat(rawNumericColumns(:, 22));
auxO3 = cell2mat(rawNumericColumns(:, 23));
labNO = cell2mat(rawNumericColumns(:, 24));
labNO2 = cell2mat(rawNumericColumns(:, 25));
labO3 = cell2mat(rawNumericColumns(:, 26));
labCO2 = cell2mat(rawNumericColumns(:, 27));
labTPM25 = cell2mat(rawNumericColumns(:, 28));
labPM25 = cell2mat(rawNumericColumns(:, 29));

clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me dateFormats dateFormatIndex dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns R;

%% Begin processing
matlabdtv=DateTimeValue+693962;

figure(1);clf
plot(matlabdtv,PM25,'b-')
datetick('x',6)

for i=1:5334
    if isscalar(PM25(i))==0
        PM25(i)=NaN;
    end
end
meantotal=  nanmean(PM25);
starttotal= datetime(matlabdtv(2),'ConvertFrom','datenum');
endtotal=   datetime(matlabdtv(5333),'ConvertFrom','datenum');

% The element number at the end of the first phase is 2213
% The end of second phase is 5333
firstphase=2:2213;
mean1 =     nanmean(PM25(firstphase));
start1=     datetime(matlabdtv(2),'ConvertFrom','datenum');
end1  =     datetime(matlabdtv(2213),'ConvertFrom','datenum');

figure(2);clf
plot(matlabdtv(firstphase),PM25(firstphase),'r-')

secondphase=2213:5333;
mean2=nanmean(PM25(secondphase));
start2= datetime(matlabdtv(2214),'ConvertFrom','datenum');
end2=   datetime(matlabdtv(5333),'ConvertFrom','datenum');
figure(3);clf
plot(matlabdtv(secondphase),PM25(secondphase),'g-')

%% Data viewing
fprintf('Total mean, first phase, second phase\n')
fprintf('%5.3f %s %s\n%5.3f %s %s\n%5.3f %s %s\n',...
meantotal,starttotal,endtotal,mean1,start1,end1,mean2,start2,end2)